name: Smart auto-merge main to release

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests and linting
        run: |
          npm run test:ci
          npm run lint
          
      - name: Build project to verify integrity
        run: npm run build

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check for merge conflicts
        id: check-conflicts
        run: |
          git checkout release
          git fetch origin main
          
          # Try to merge without committing to check for conflicts
          echo "Checking for merge conflicts between main and release..."
          
          if git merge --no-commit --no-ff origin/main; then
            echo "‚úÖ No conflicts detected - can auto-merge"
            echo "conflicts=false" >> $GITHUB_OUTPUT
            # Abort the test merge
            git merge --abort
          else
            echo "‚ö†Ô∏è Merge conflicts detected - will create PR for manual resolution"
            echo "conflicts=true" >> $GITHUB_OUTPUT
            # Abort the failed merge
            git merge --abort
          fi

      - name: Direct merge if no conflicts
        if: steps.check-conflicts.outputs.conflicts == 'false'
        run: |
          echo "üöÄ Performing automatic merge from main to release..."
          git checkout release
          
          # Get the latest commit info for better commit message
          LATEST_COMMIT=$(git log -1 --pretty=format:"%h - %s" origin/main)
          
          # Perform the actual merge
          git merge origin/main --no-ff -m "chore: auto-merge main to release

          Latest changes from main:
          $LATEST_COMMIT
          
          ‚úÖ All tests and linting passed
          ü§ñ Automatically merged by GitHub Actions"
          
          # Push the merged changes
          git push origin release
          
          echo "‚úÖ Successfully merged main into release"

      - name: Get conflicting files info
        if: steps.check-conflicts.outputs.conflicts == 'true'
        id: conflict-info
        run: |
          git checkout release
          git fetch origin main
          
          # Get list of files that would conflict
          CONFLICT_FILES=""
          
          # Try merge again to get conflict info
          if ! git merge --no-commit --no-ff origin/main 2>/dev/null; then
            # Get the files with conflicts
            CONFLICT_FILES=$(git diff --name-only --diff-filter=U 2>/dev/null || echo "Unable to determine specific files")
            git merge --abort
          fi
          
          echo "conflict-files<<EOF" >> $GITHUB_OUTPUT
          echo "$CONFLICT_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create PR if conflicts exist
        if: steps.check-conflicts.outputs.conflicts == 'true'
        uses: peter-evans/create-pull-request@v5
        id: create-pr
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: auto-merge/main-to-release-${{ github.run_number }}
          base: release
          title: '‚ö†Ô∏è Manual merge required: main ‚Üí release (Conflicts detected)'
          body: |
            üö® **Manual intervention required**
            
            Automatic merge from main to release failed due to conflicts.
            
            **Trigger:** Changes pushed to main branch
            **Workflow Run:** ${{ github.run_id }}
            **Latest Commit:** ${{ github.sha }}
            
            ## Conflicting Files
            ```
            ${{ steps.conflict-info.outputs.conflict-files }}
            ```
            
            ## Steps to resolve:
            1. **Check out this branch locally:**
               ```bash
               git fetch origin
               git checkout auto-merge/main-to-release-${{ github.run_number }}
               ```
            
            2. **Merge main and resolve conflicts:**
               ```bash
               git merge main
               # Resolve conflicts in your editor
               git add .
               git commit -m "resolve: merge conflicts from main to release"
               ```
            
            3. **Push resolved changes:**
               ```bash
               git push origin auto-merge/main-to-release-${{ github.run_number }}
               ```
            
            4. **Merge this PR** once conflicts are resolved
            
            ## Quality Checks Status
            - ‚úÖ Tests passed on main branch
            - ‚úÖ Linting passed on main branch  
            - ‚úÖ Build completed successfully
            
            ---
            *This PR was automatically created due to merge conflicts*
            *ü§ñ Generated by GitHub Actions*
          commit-message: 'chore: prepare merge from main to release (conflicts detected)'
          delete-branch: true
          draft: false

      - name: Add labels to conflict PR
        if: steps.check-conflicts.outputs.conflicts == 'true' && steps.create-pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.create-pr.outputs.pull-request-number }},
              labels: ['automerge-conflict', 'needs-resolution', 'main‚Üírelease']
            });

      - name: Create issue if conflict PR creation fails
        if: steps.check-conflicts.outputs.conflicts == 'true' && !steps.create-pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Auto-merge failed: main ‚Üí release',
              body: `**Auto-merge workflow failed**
              
              The automatic merge from main to release failed due to conflicts, and creating a PR also failed.
              
              **Manual Action Required:**
              1. Check the workflow logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
              2. Manually merge main into release:
                 \`\`\`bash
                 git checkout release
                 git pull origin release
                 git merge main
                 # Resolve any conflicts
                 git push origin release
                 \`\`\`
              
              **Workflow Details:**
              - Run ID: ${{ github.run_id }}
              - Trigger: Push to main (${{ github.sha }})
              - Time: ${{ github.event.head_commit.timestamp }}
              `,
              labels: ['bug', 'automerge-failed', 'urgent']
            });

      - name: Notify success
        if: steps.check-conflicts.outputs.conflicts == 'false'
        run: |
          echo "üéâ Auto-merge completed successfully!"
          echo "‚úÖ Main branch has been automatically merged into release"
          echo "üîç View the merge commit: https://github.com/${{ github.repository }}/commit/$(git rev-parse HEAD)"