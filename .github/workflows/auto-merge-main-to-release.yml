name: Auto-merge Main to Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_merge:
        description: 'Force merge even if there are conflicts (will favor main)'
        required: false
        default: 'false'
        type: boolean

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"

    - name: Check if release branch exists
      id: check_release
      run: |
        if git rev-parse --verify origin/release >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create release branch if it doesn't exist
      if: steps.check_release.outputs.exists == 'false'
      run: |
        echo "🌱 Creating release branch from main..."
        git checkout -b release
        git push origin release
        echo "✅ Release branch created successfully"

    - name: Attempt auto-merge
      if: steps.check_release.outputs.exists == 'true'
      id: merge_attempt
      run: |
        echo "🔄 Starting auto-merge from main to release..."
        
        # Switch to release branch
        git checkout release
        git pull origin release
        
        # Check if there are any differences
        if git diff --quiet release origin/main; then
          echo "status=no_changes" >> $GITHUB_OUTPUT
          echo "📋 No changes to merge - branches are already in sync"
          exit 0
        fi
        
        # Attempt to merge main into release
        if git merge origin/main --no-edit; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ Auto-merge completed successfully"
        else
          echo "status=conflict" >> $GITHUB_OUTPUT
          echo "⚠️ Merge conflicts detected"
          
          # If force merge is enabled, resolve conflicts by favoring main
          if [[ "${{ github.event.inputs.force_merge }}" == "true" ]]; then
            echo "🔧 Force merge enabled - resolving conflicts by favoring main..."
            git reset --hard origin/main
            echo "status=force_merged" >> $GITHUB_OUTPUT
            echo "✅ Force merge completed - main changes applied to release"
          else
            # Abort the merge
            git merge --abort
            echo "❌ Auto-merge failed due to conflicts. Manual intervention required."
            exit 1
          fi
        fi

    - name: Push merged changes
      if: steps.merge_attempt.outputs.status == 'success' || steps.merge_attempt.outputs.status == 'force_merged'
      run: |
        git push origin release
        echo "🚀 Changes pushed to release branch"

    - name: Create merge summary comment
      if: steps.merge_attempt.outputs.status == 'success' || steps.merge_attempt.outputs.status == 'force_merged'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.merge_attempt.outputs.status }}';
          const commitSha = '${{ github.sha }}';
          const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          
          let emoji, title, details;
          
          if (status === 'success') {
            emoji = '✅';
            title = 'Auto-merge completed successfully';
            details = `Changes from main have been automatically merged into the release branch.`;
          } else if (status === 'force_merged') {
            emoji = '🔧';
            title = 'Force merge completed';
            details = `Conflicts were resolved by applying main branch changes to release.`;
          }
          
          const body = `${emoji} **${title}**

          ${details}

          **Details:**
          - **Commit:** \`${commitSha.substring(0, 7)}\`
          - **Action:** [View workflow run](${runUrl})
          - **Time:** ${new Date().toISOString()}
          
          The release branch is now up to date with main.`;

          // Try to find and update an existing auto-merge comment, or create a new one
          try {
            const { data: comments } = await github.rest.repos.listCommentsForCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSha,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Auto-merge completed') || comment.body.includes('Force merge completed')
            );
            
            if (existingComment) {
              await github.rest.repos.updateCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commitSha,
                body: body
              });
            }
          } catch (error) {
            console.log('Could not create/update commit comment:', error.message);
          }

    - name: Create conflict notification issue
      if: failure() && steps.merge_attempt.outputs.status == 'conflict'
      uses: actions/github-script@v7
      with:
        script: |
          const commitSha = '${{ github.sha }}';
          const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          
          const title = `🚨 Auto-merge conflict: main → release`;
          const body = `**Auto-merge from main to release failed due to conflicts**

          **Details:**
          - **Commit:** \`${commitSha}\`
          - **Failed Action:** [View workflow run](${runUrl})
          - **Time:** ${new Date().toISOString()}
          
          **Next Steps:**
          1. Manually resolve conflicts by running:
             \`\`\`bash
             git checkout release
             git pull origin release
             git merge main
             # Resolve conflicts in your editor
             git add .
             git commit
             git push origin release
             \`\`\`
          
          2. Or trigger a force merge by running the workflow manually with the "Force merge" option enabled.
          
          **Automatic Resolution:**
          This issue will be automatically closed when the next successful merge occurs.`;

          // Check if a similar issue already exists
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'auto-merge-conflict'
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('Auto-merge conflict: main → release')
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['auto-merge-conflict', 'urgent']
            });
          }

    - name: Close resolved conflict issues
      if: steps.merge_attempt.outputs.status == 'success' || steps.merge_attempt.outputs.status == 'force_merged'
      uses: actions/github-script@v7
      with:
        script: |
          // Close any open auto-merge conflict issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'auto-merge-conflict'
          });
          
          for (const issue of issues) {
            if (issue.title.includes('Auto-merge conflict: main → release')) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ **Auto-merge conflict resolved**
                
                The merge conflict has been resolved and changes have been successfully merged from main to release.
                
                **Action:** [View successful workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }
          }

    - name: Workflow summary
      run: |
        echo "## 🔄 Auto-merge Main to Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.merge_attempt.outputs.status || 'branch_created' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        case "${{ steps.merge_attempt.outputs.status || 'branch_created' }}" in
          "no_changes")
            echo "📋 No changes to merge - branches are already synchronized." >> $GITHUB_STEP_SUMMARY
            ;;
          "success")
            echo "✅ Auto-merge completed successfully! Release branch is now up to date." >> $GITHUB_STEP_SUMMARY
            ;;
          "force_merged")
            echo "🔧 Force merge completed! Conflicts resolved by applying main changes." >> $GITHUB_STEP_SUMMARY
            ;;
          "conflict")
            echo "❌ Auto-merge failed due to conflicts. Manual intervention required." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Resolution Options:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Resolve conflicts manually" >> $GITHUB_STEP_SUMMARY
            echo "2. Re-run this workflow with force merge enabled" >> $GITHUB_STEP_SUMMARY
            ;;
          "branch_created")
            echo "🌱 Release branch created from main." >> $GITHUB_STEP_SUMMARY
            ;;
        esac